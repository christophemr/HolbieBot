from flask import Flask, render_template, request, jsonify
from flask_cors import CORS
from chat import get_response_fr, get_response_en

app = Flask(__name__, static_folder='../frontend/static', template_folder='templates')
CORS(app)

# Set secure cookies and session management
app.config.update(
    # Cookies are protected from being accessed by malicious scripts
    SESSION_COOKIE_HTTPONLY=True,
    # Cookies are transmitted over secure channels
    SESSION_COOKIE_SECURE=True,
    # URLs generated by the application are secure by default
    PREFERRED_URL_SCHEME='https'
)

@app.get("/")
def index():
    """
    Render the main page of the chatbot interface.

    This route handles GET requests to the root URL ("/") and returns the index.html template.
    
    Returns:
        Response: Rendered HTML template for the main page.
    """
    return render_template('index.html')

@app.post("/predict")
def predict():
    """
    Handle the chatbot response generation.

    This route handles POST requests to the "/predict" URL. It retrieves the user's message
    and the selected language from the request JSON, processes the message through the appropriate
    language model, and returns the chatbot's response.

    Returns:
        Response: JSON response containing the chatbot's answer.
    """
    data = request.get_json()
    text = data.get("message")
    language = data.get("language")

    if language == "fr":
        response = get_response_fr(text)
    else:
        response = get_response_en(text)

    message = {"answer": response}
    return jsonify(message)

# Error handler for 404 Not Found
@app.errorhandler(404)
def not_found_error(error):
    response = jsonify({'error': '404 Not Found'})
    response.status_code = 404
    return response

# Error handler for 500 Internal Server Error
@app.errorhandler(500)
def internal_error(error):
    response = jsonify({'error': '500 Internal Server Error'})
    response.status_code = 500
    return response

# Error handler for 403 Forbidden
@app.errorhandler(403)
def forbidden_error(error):
    response = jsonify({'error': '403 Forbidden'})
    response.status_code = 403
    return response

if __name__ == "__main__":
    app.run(host='0.0.0.0', port=5000)
